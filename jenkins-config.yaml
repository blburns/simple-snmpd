# Jenkins Configuration for Simple SNMP Daemon CI/CD Pipeline
# This YAML configuration can be used with Jenkins Configuration as Code (JCasC) plugin
# or converted to a pipeline job configuration

jenkins:
  systemMessage: "Simple SNMP Daemon CI/CD Pipeline"
  numExecutors: 2
  mode: NORMAL
  scmCheckoutRetryCount: 3

jobs:
  - name: "simple-snmpd-pipeline"
    type: "pipeline"
    description: "Simple SNMP Daemon CI/CD Pipeline"
    
    # Build configuration
    properties:
      - buildDiscarder:
          strategy:
            logRotator:
              daysToKeep: 30
              numToKeep: 10
              artifactDaysToKeep: 7
              artifactNumToKeep: 5
      - githubProject:
          projectUrl: "https://github.com/SimpleDaemons/simple-snmpd"
      - pipelineTriggers:
          triggers:
            - scm:
                scmpoll_spec: "H/5 * * * *"
            - githubPush:
                events:
                  - push
                  - pullRequest
                branches:
                  - main
                  - develop
    
    # SCM Configuration
    scm:
      git:
        remote: "https://github.com/SimpleDaemons/simple-snmpd.git"
        credentialsId: "github-credentials"
        branches:
          - "*/main"
          - "*/develop"
        extensions:
          - cleanBeforeCheckout
          - cleanCheckout
          - wipeWorkspace
        submoduleCfg:
          - disableSubmodules: false
    
    # Pipeline definition
    pipeline:
      script: |
        pipeline {
          agent any
          
          parameters {
            choice(
              name: 'BUILD_TYPE',
              choices: ['Release', 'Debug', 'RelWithDebInfo'],
              description: 'CMake build type'
            )
            choice(
              name: 'DOCKER_REGISTRY',
              choices: ['docker.io', 'ghcr.io', 'quay.io'],
              description: 'Docker registry to push images'
            )
            string(
              name: 'DOCKER_NAMESPACE',
              defaultValue: 'simpledaemons',
              description: 'Docker namespace for images'
            )
            booleanParam(
              name: 'ENABLE_TESTS',
              defaultValue: true,
              description: 'Run unit and integration tests'
            )
            booleanParam(
              name: 'ENABLE_SECURITY_SCAN',
              defaultValue: true,
              description: 'Run security scanning'
            )
            booleanParam(
              name: 'ENABLE_COVERAGE',
              defaultValue: true,
              description: 'Generate code coverage reports'
            )
            booleanParam(
              name: 'BUILD_DOCKER_IMAGES',
              defaultValue: true,
              description: 'Build and push Docker images'
            )
            booleanParam(
              name: 'BUILD_PACKAGES',
              defaultValue: true,
              description: 'Build platform-specific packages'
            )
            choice(
              name: 'TARGET_ARCHITECTURES',
              choices: ['x86_64', 'arm64', 'multi-arch'],
              description: 'Target architectures for Docker builds'
            )
          }
          
          environment {
            PROJECT_NAME = 'simple-snmpd'
            VERSION = sh(
              script: 'git describe --tags --always --dirty',
              returnStdout: true
            ).trim()
            BUILD_NUMBER = "${env.BUILD_NUMBER}"
            DOCKER_IMAGE = "${params.DOCKER_NAMESPACE}/${PROJECT_NAME}"
            DOCKER_TAG = "${VERSION}-${BUILD_NUMBER}"
            DOCKER_LATEST_TAG = "latest"
            COVERAGE_THRESHOLD = 80
          }
          
          options {
            timeout(time: 60, unit: 'MINUTES')
            timestamps()
            ansiColor('xterm')
            buildDiscarder(logRotator(numToKeepStr: '10'))
            skipDefaultCheckout()
          }
          
          stages {
            stage('Checkout') {
              steps {
                script {
                  checkout scm
                  sh 'git clean -fd'
                }
              }
            }
            
            stage('Environment Setup') {
              parallel {
                stage('Detect Platform') {
                  steps {
                    script {
                      if (isUnix()) {
                        env.PLATFORM = sh(script: 'uname -s', returnStdout: true).trim().toLowerCase()
                        env.ARCH = sh(script: 'uname -m', returnStdout: true).trim()
                      } else {
                        env.PLATFORM = 'windows'
                        env.ARCH = 'x86_64'
                      }
                      echo "Building on ${env.PLATFORM} (${env.ARCH})"
                    }
                  }
                }
                
                stage('Install Dependencies') {
                  steps {
                    script {
                      if (isUnix()) {
                        sh '''
                          # Install build dependencies
                          if command -v apt-get >/dev/null 2>&1; then
                            sudo apt-get update
                            sudo apt-get install -y build-essential cmake pkg-config libssl-dev
                          elif command -v yum >/dev/null 2>&1; then
                            sudo yum update -y
                            sudo yum install -y gcc-c++ cmake3 openssl-devel pkgconfig
                          elif command -v brew >/dev/null 2>&1; then
                            brew install cmake openssl pkg-config
                          fi
                          
                          # Install development tools
                          if [ "${ENABLE_TESTS}" = "true" ]; then
                            if command -v apt-get >/dev/null 2>&1; then
                              sudo apt-get install -y valgrind gdb
                            elif command -v yum >/dev/null 2>&1; then
                              sudo yum install -y valgrind gdb
                            fi
                          fi
                          
                          # Install security scanning tools
                          if [ "${ENABLE_SECURITY_SCAN}" = "true" ]; then
                            if command -v apt-get >/dev/null 2>&1; then
                              sudo apt-get install -y cppcheck
                            elif command -v yum >/dev/null 2>&1; then
                              sudo yum install -y cppcheck
                            fi
                          fi
                        '''
                      } else {
                        bat '''
                          echo "Windows build - dependencies should be pre-installed"
                          echo "Required: Visual Studio 2019+, CMake, OpenSSL"
                        '''
                      }
                    }
                  }
                }
              }
            }
            
            stage('Code Quality') {
              parallel {
                stage('Lint') {
                  steps {
                    script {
                      if (isUnix()) {
                        sh '''
                          echo "Running code linting..."
                          find src include -name "*.cpp" -o -name "*.hpp" | xargs cppcheck --enable=all --std=c++17 --suppress=missingIncludeSystem --error-exitcode=1 || true
                        '''
                      }
                    }
                  }
                }
                
                stage('Format Check') {
                  steps {
                    script {
                      if (isUnix()) {
                        sh '''
                          echo "Checking code formatting..."
                          if command -v clang-format >/dev/null 2>&1; then
                            find src include -name "*.cpp" -o -name "*.hpp" | xargs clang-format --dry-run --Werror || true
                          else
                            echo "clang-format not available, skipping format check"
                          fi
                        '''
                      }
                    }
                  }
                }
              }
            }
            
            stage('Build') {
              parallel {
                stage('Linux Build') {
                  when {
                    expression { isUnix() && env.PLATFORM == 'linux' }
                  }
                  steps {
                    sh '''
                      echo "Building for Linux..."
                      mkdir -p build
                      cd build
                      
                      # Configure with CMake
                      cmake .. \
                        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
                        -DBUILD_TESTS=${ENABLE_TESTS} \
                        -DENABLE_LOGGING=ON \
                        -DENABLE_IPV6=ON
                      
                      # Build
                      make -j$(nproc)
                      
                      # Build packages if requested
                      if [ "${BUILD_PACKAGES}" = "true" ]; then
                        make package
                      fi
                    '''
                  }
                }
                
                stage('macOS Build') {
                  when {
                    expression { isUnix() && env.PLATFORM == 'darwin' }
                  }
                  steps {
                    sh '''
                      echo "Building for macOS..."
                      mkdir -p build
                      cd build
                      
                      # Configure with CMake
                      cmake .. \
                        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
                        -DBUILD_TESTS=${ENABLE_TESTS} \
                        -DENABLE_LOGGING=ON \
                        -DENABLE_IPV6=ON
                      
                      # Build
                      make -j$(sysctl -n hw.ncpu)
                      
                      # Build packages if requested
                      if [ "${BUILD_PACKAGES}" = "true" ]; then
                        make package
                      fi
                    '''
                  }
                }
                
                stage('Windows Build') {
                  when {
                    expression { !isUnix() }
                  }
                  steps {
                    bat '''
                      echo "Building for Windows..."
                      mkdir build
                      cd build
                      
                      rem Configure with CMake
                      cmake .. -G "Visual Studio 16 2019" -A x64 -DCMAKE_BUILD_TYPE=%BUILD_TYPE%
                      
                      rem Build
                      cmake --build . --config %BUILD_TYPE%
                      
                      rem Build packages if requested
                      if "%BUILD_PACKAGES%"=="true" (
                        cpack -G WIX
                        cpack -G ZIP
                      )
                    '''
                  }
                }
              }
            }
            
            stage('Test') {
              when {
                expression { params.ENABLE_TESTS == true }
              }
              parallel {
                stage('Unit Tests') {
                  steps {
                    script {
                      if (isUnix()) {
                        sh '''
                          echo "Running unit tests..."
                          cd build
                          
                          # Run tests with verbose output
                          ctest --output-on-failure --verbose
                          
                          # Generate test report
                          ctest --output-junit test-results.xml
                        '''
                      } else {
                        bat '''
                          echo "Running unit tests on Windows..."
                          cd build
                          ctest --output-on-failure --verbose -C %BUILD_TYPE%
                        '''
                      }
                    }
                  }
                  post {
                    always {
                      publishTestResults testResultsPattern: 'build/test-results.xml'
                    }
                  }
                }
                
                stage('Integration Tests') {
                  steps {
                    script {
                      if (isUnix()) {
                        sh '''
                          echo "Running integration tests..."
                          cd build
                          
                          # Test daemon startup
                          ./bin/simple-snmpd --test-config -c ../config/simple-snmpd.conf
                          
                          # Test version output
                          ./bin/simple-snmpd --version
                          
                          # Test help output
                          ./bin/simple-snmpd --help
                        '''
                      } else {
                        bat '''
                          echo "Running integration tests on Windows..."
                          cd build
                          bin\\%BUILD_TYPE%\\simple-snmpd.exe --test-config -c ..\\config\\simple-snmpd.conf
                          bin\\%BUILD_TYPE%\\simple-snmpd.exe --version
                          bin\\%BUILD_TYPE%\\simple-snmpd.exe --help
                        '''
                      }
                    }
                  }
                }
              }
            }
            
            stage('Docker Build') {
              when {
                expression { params.BUILD_DOCKER_IMAGES == true }
              }
              steps {
                script {
                  def dockerfile = 'Dockerfile'
                  def platforms = []
                  
                  switch(params.TARGET_ARCHITECTURES) {
                    case 'x86_64':
                      platforms = ['linux/amd64']
                      break
                    case 'arm64':
                      platforms = ['linux/arm64']
                      break
                    case 'multi-arch':
                      platforms = ['linux/amd64', 'linux/arm64', 'linux/arm/v7']
                      break
                  }
                  
                  def buildArgs = [
                    "--platform=${platforms.join(',')}",
                    "--tag=${env.DOCKER_IMAGE}:${env.DOCKER_TAG}",
                    "--tag=${env.DOCKER_IMAGE}:${env.DOCKER_LATEST_TAG}",
                    "--build-arg=VERSION=${env.VERSION}",
                    "--build-arg=BUILD_NUMBER=${env.BUILD_NUMBER}",
                    "--file=${dockerfile}",
                    "."
                  ]
                  
                  if (platforms.size() > 1) {
                    // Multi-architecture build
                    sh """
                      echo "Building multi-architecture Docker images..."
                      docker buildx create --use --name multiarch-builder || true
                      docker buildx build ${buildArgs.join(' ')} --push
                    """
                  } else {
                    // Single architecture build
                    sh """
                      echo "Building Docker image for ${platforms[0]}..."
                      docker build ${buildArgs.join(' ')} .
                      
                      # Tag for local testing
                      docker tag ${env.DOCKER_IMAGE}:${env.DOCKER_TAG} ${env.DOCKER_IMAGE}:local
                    """
                  }
                }
              }
            }
          }
          
          post {
            always {
              // Archive build artifacts
              archiveArtifacts artifacts: 'build/**/*.deb,build/**/*.rpm,build/**/*.dmg,build/**/*.pkg,build/**/*.msi,build/**/*.zip,build/**/*.tar.gz', allowEmptyArchive: true
              
              // Clean up workspace
              cleanWs()
            }
            
            success {
              script {
                if (params.BUILD_DOCKER_IMAGES) {
                  echo "Build successful! Docker images available:"
                  echo "- ${env.DOCKER_IMAGE}:${env.DOCKER_TAG}"
                  echo "- ${env.DOCKER_IMAGE}:${env.DOCKER_LATEST_TAG}"
                }
              }
            }
            
            failure {
              echo "Build failed! Check the logs for details."
            }
            
            unstable {
              echo "Build unstable! Some tests may have failed."
            }
          }
        }
    
    # Publishers
    publishers:
      - artifactArchiver:
          artifacts: "build/**/*.deb,build/**/*.rpm,build/**/*.dmg,build/**/*.pkg,build/**/*.msi,build/**/*.zip,build/**/*.tar.gz"
          allowEmptyArchive: true
          onlyIfSuccessful: false
          fingerprint: false
          caseSensitive: true
      - testResults:
          testResultsPattern: "build/test-results.xml"
      - cobertura:
          reportFilePattern: "build/coverage.xml"
          onlyStable: false
          failUnhealthy: false
          failUnstable: false
          autoUpdateHealth: false
          autoUpdateStability: false
          zoomCoverageChart: false
          enableNewApi: true
          sourceEncoding: "ASCII"
          useDeltaValues: false
          failNoReports: false
          lineCoverageTargets: "80, 0, 0"
          methodCoverageTargets: "80, 0, 0"
          conditionalCoverageTargets: "70, 0, 0"
      - htmlPublisher:
          reportName: "Coverage Report"
          reportDir: "build/coverage_html"
          reportFiles: "index.html"
          keepAll: true
          allowMissing: false
          alwaysLinkToLastBuild: true
          wrappers:
            - buildNameUpdater:
                buildName: "#${BUILD_NUMBER} - ${VERSION}"
    
    # Build wrappers
    wrappers:
      - timestamps
      - ansiColor
      - timeout:
          timeout: 60
          timeoutType: "ABSOLUTE"
      - buildNameUpdater:
          buildName: "#${BUILD_NUMBER} - ${VERSION}"

# Global tool configurations
tools:
  git:
    installations:
      - name: "Default"
        home: "git"
  maven:
    installations:
      - name: "Maven"
        home: "/usr/share/maven"
  jdk:
    installations:
      - name: "JDK 17"
        home: "/usr/lib/jvm/java-17-openjdk"

# Security configuration
security:
  globalJobDslSecurityConfiguration:
    useScriptSecurity: false
    useScriptApproval: false

# Plugin configurations
unclassified:
  buildStepOperation:
    enabled: true
  buildTimeoutWrapper:
    timeout: 60
    timeoutType: "ABSOLUTE"
    operationList:
      - abortOperation
      - failOperation
      - writeDescriptionOperation
  globalLibraries:
    libraries:
      - name: "pipeline-library"
        defaultVersion: "main"
        retriever:
          modernSCM:
            scm:
              git:
                remote: "https://github.com/jenkinsci/pipeline-library.git"
